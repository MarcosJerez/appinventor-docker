{
    "docs": [
        {
            "location": "/",
            "text": "Docker\n\n\nLa idea detr\u00e1s de \nDocker\n es crear contenedores ligeros y portables para las aplicaciones software que puedan ejecutarse en cualquier m\u00e1quina con Docker instalado, independientemente del sistema operativo que la m\u00e1quina tenga por debajo, facilitando as\u00ed tambi\u00e9n los despliegues.\n\n\nCompose\n\n\nDocker Compose es una herramienta que permite simplificar el uso de Docker, generando scripts que facilitan el dise\u00f1o y la construcci\u00f3n de servicios o de aplicaciones con m\u00faltiples componentes. \nCon Compose puedes crear diferentes contenedores y al mismo tiempo, en cada contenedor, diferentes servicios, unirlos a un vol\u00famen com\u00fan, iniciarlos y apagarlos, etc. Es un componente fundamental para poder construir aplicaciones y microservicios.\n\n\nEsta herramienta llamada docker-compose nos permite crear un fichero de configuraci\u00f3n con todos los contenedores que queremos levantar, establecer las dependencias entre ellos y configurarlos individualmente.\n\n\nInstalaci\u00f3n\n\n\n\n\nCentos 7\n\n\nAqu\u00ed veremos como se instala en Centos 7\n\n\nEs recomentdable desinstalar viejas versiones de Docker:\n\n\nsudo yum remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-engine\n\n\n\nDocker\n\n\nNecesitamos tener un sistema Dockerizado.  Para ello necesitamos instalar:\n\n\n\n\nsudo yum update\n \n\n\nsudo yum install -y yum-utils\n \n\n\nsudo yum-config-manager  --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n - A\u00f1adimos a nuestro repositorio \n\n\n\n\nsudo yum install docker-ce docker-ce-cli containerd.io\n - Instalamos la ultima versi\u00f3n de docker\n\n\n\n\n\n\nsudo systemctl enable docker\n - Para que arranque por defecto   \n\n\n\n\nsudo systemctl start docker\n - Arrancamos el sistema\n\n\nsudo docker run hello-world\n - Para verificar que se ha arrancado correctamente docker\n\n\n\n\nSi se quiere instalar otra version de docker podemos ver las versiones con este comando:\n\n\n\n\nsudo yum install docker-ce docker-ce-cli containerd.io\n\n\n\n\nCompose\n\n\n\n\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n\n\n\nSi se quiere instalar otra version de compose podemos ver las versiones con este comando:\n\nCompose repository release page on GitHub\n\n\n\n\nsudo chmod +x /usr/local/bin/docker-compose\n - Aplicar permisos\n\n\n\n\n\n\nUbuntu\n\n\nAqu\u00ed veremos como se instala en Ubuntu 19.10\n\n\nDocker\n\n\nNecesitamos tener un sistema Dockerizado.  Para ello necesitamos instalar:\n\n\n\n\nsudo apt-get remove docker docker-engine docker.io containerd runc\n -Para desinstalar viejas versiones\n\n\n\n\nVamos a hacerlo con Docker Engine\n\n\n\n\nsudo apt-get update\n - Actualizamos \n\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n \n\n\n\n\nSi no esta en nuestro repositorios lo a\u00f1adimos\n\n\n\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add\n \n\n\n\n\nsudo bash -c 'echo \"deb [arch=amd64] https://download.docker.com/linux/ubuntu disco stable\" > /etc/apt/sources.list.d/docker-ce.list'\n\n\n\n\n\n\nsudo apt-get update\n - Actualizamos \n\n\n\n\napt-cache policy docker-ce\n - Vemos que esta en el repositorio\n\n\nsudo apt-get install -y docker-ce\n - Instalamos\n\n\n\n\nsi quieres instalar una especifica versi\u00f3n\n\n\n\n\napt-cache madison docker-ce\n\n\nsudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io\n\n\n\n\nArranque del servicio\n\n\n\n\nsudo systemctl enable docker\n - Para que arranque por defecto   \n\n\nsudo systemctl start docker\n - Arrancamos el sistema\n\n\nsudo docker run hello-world\n - Para verificar que se ha arrancado correctamente docker\n\n\n\n\nCompose\n\n\n\n\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n\n\n\nSi se quiere instalar otra version de compose podemos ver las versiones con este comando:\n\nCompose repository release page on GitHub\n\n\n\n\nsudo chmod +x /usr/local/bin/docker-compose\n - Aplicar permisos\n\n\n\n\n\n\nCommandos B\u00e1sicos\n\n\nDocker\n\n\nSeguramente tengas que executar los siguientes comandos con sudo pero si no quieres hacerlo pincah \naqu\u00ed\n y al final de la p\u00e1gina te dice como\n\n\n\n\ndocker run -i -t ubuntu /bin/echo\n - Crear y ejecutar un contenedor. Lo busca en local y si no lo encuentra se lo descarga. El echo mostrar\u00e1 ese mensaje cuando arranque el contenedor.  \n\n\ndocker start -a <pon-la-ID-del-container>\n - Para arrancar un contenedor\n\n\n\n\ndocker stop <pon-la-ID-del-container>\n - Para parar\n\n\n\n\n\n\ndocker pull ubuntu:XX.XX\n - Descargar im\u00e1genes en Docker cloud\n\n\n\n\n\n\ndocker images\n - Todas las im\u00e1genes disponibles\n\n\n\n\n\n\ndocker image rm <nombre-de-imagen>\n - Para borrar imagenes\n\n\n\n\n\n\ndocker container exec -it proxy /bin/bash\n - Entrar en un contenedor en ejecuci\u00f3n\n\n\n\n\n\n\ndocker ps -a\n - Muestra todos los contenedores.\n\n\n\n\n\n\ndocker ps -s\n - Muestra el disco usado\n\n\n\n\n\n\ndocker ps --filter\n - Este comando es interesante. status={created, restarting, running, removing, paused, exited and dead}\n\n\n\n\n\n\ndocker ps --filter status=running\n - Muestra los contenedores corriendo.\n\n\n\n\n\n\ndocker kill $(docker ps -q)\n - Para todos los contenedores\n\n\n\n\ndocker rm $(docker ps -a -q)\n - Elimina todos los contenedores\n\n\ndocker rmi -f $(docker images -q)\n - Elimina todas las imagenes descargadas\nCompartir el directorio de trabajo:   \n$ docker run -ti -v \"$PWD\":/shared:ro ubuntu:14.04 /bin/bash\nro = lectura. Por defecto es de lectura/escritura\n\n\n\n\n\n\n\nDesinstalar Docker\n* \nsudo apt-get purge docker-engine\n - Desintala\n\n\nCompose\n\n\n\n\ndocker-compose --version\n - La version\n\n\ndocker-compose up -d\n -  Crear el contenedor y lo ejecuta en background\n\n\ndocker-compose start\n - Levanta el contenedor\n\n\ndocker-compose down\n - Apaga los servicios que se levanto con docker-compose y borra los datos.\n\n\ndocker-compose stop\n - Detiene los servicios y deja los datos como estaban.\n\n\ndocker-compose ps\n - Muestra los contenedores funcionado\n\n\ndocker-compose exec\n - Manda un comando y lo ejecuta a uno de los servicios levantados en el contenedor por Docker-compose. Servicios de docker-compose puede ser MYSQL o en el ejemplo: \u201cjekyll\u201d",
            "title": "Home"
        },
        {
            "location": "/#docker",
            "text": "La idea detr\u00e1s de  Docker  es crear contenedores ligeros y portables para las aplicaciones software que puedan ejecutarse en cualquier m\u00e1quina con Docker instalado, independientemente del sistema operativo que la m\u00e1quina tenga por debajo, facilitando as\u00ed tambi\u00e9n los despliegues.",
            "title": "Docker"
        },
        {
            "location": "/#compose",
            "text": "Docker Compose es una herramienta que permite simplificar el uso de Docker, generando scripts que facilitan el dise\u00f1o y la construcci\u00f3n de servicios o de aplicaciones con m\u00faltiples componentes. \nCon Compose puedes crear diferentes contenedores y al mismo tiempo, en cada contenedor, diferentes servicios, unirlos a un vol\u00famen com\u00fan, iniciarlos y apagarlos, etc. Es un componente fundamental para poder construir aplicaciones y microservicios.  Esta herramienta llamada docker-compose nos permite crear un fichero de configuraci\u00f3n con todos los contenedores que queremos levantar, establecer las dependencias entre ellos y configurarlos individualmente.",
            "title": "Compose"
        },
        {
            "location": "/#instalacion",
            "text": "",
            "title": "Instalaci\u00f3n"
        },
        {
            "location": "/#centos-7",
            "text": "Aqu\u00ed veremos como se instala en Centos 7  Es recomentdable desinstalar viejas versiones de Docker:  sudo yum remove docker \\\n              docker-client \\\n              docker-client-latest \\\n              docker-common \\\n              docker-latest \\\n              docker-latest-logrotate \\\n              docker-logrotate \\\n              docker-engine",
            "title": "Centos 7"
        },
        {
            "location": "/#docker_1",
            "text": "Necesitamos tener un sistema Dockerizado.  Para ello necesitamos instalar:   sudo yum update    sudo yum install -y yum-utils    sudo yum-config-manager  --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo  - A\u00f1adimos a nuestro repositorio    sudo yum install docker-ce docker-ce-cli containerd.io  - Instalamos la ultima versi\u00f3n de docker    sudo systemctl enable docker  - Para que arranque por defecto      sudo systemctl start docker  - Arrancamos el sistema  sudo docker run hello-world  - Para verificar que se ha arrancado correctamente docker   Si se quiere instalar otra version de docker podemos ver las versiones con este comando:   sudo yum install docker-ce docker-ce-cli containerd.io",
            "title": "Docker"
        },
        {
            "location": "/#compose_1",
            "text": "sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose   Si se quiere instalar otra version de compose podemos ver las versiones con este comando: Compose repository release page on GitHub   sudo chmod +x /usr/local/bin/docker-compose  - Aplicar permisos",
            "title": "Compose"
        },
        {
            "location": "/#ubuntu",
            "text": "Aqu\u00ed veremos como se instala en Ubuntu 19.10",
            "title": "Ubuntu"
        },
        {
            "location": "/#docker_2",
            "text": "Necesitamos tener un sistema Dockerizado.  Para ello necesitamos instalar:   sudo apt-get remove docker docker-engine docker.io containerd runc  -Para desinstalar viejas versiones   Vamos a hacerlo con Docker Engine   sudo apt-get update  - Actualizamos   sudo apt-get install docker-ce docker-ce-cli containerd.io     Si no esta en nuestro repositorios lo a\u00f1adimos   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add     sudo bash -c 'echo \"deb [arch=amd64] https://download.docker.com/linux/ubuntu disco stable\" > /etc/apt/sources.list.d/docker-ce.list'    sudo apt-get update  - Actualizamos    apt-cache policy docker-ce  - Vemos que esta en el repositorio  sudo apt-get install -y docker-ce  - Instalamos   si quieres instalar una especifica versi\u00f3n   apt-cache madison docker-ce  sudo apt-get install docker-ce=<VERSION_STRING> docker-ce-cli=<VERSION_STRING> containerd.io   Arranque del servicio   sudo systemctl enable docker  - Para que arranque por defecto     sudo systemctl start docker  - Arrancamos el sistema  sudo docker run hello-world  - Para verificar que se ha arrancado correctamente docker",
            "title": "Docker"
        },
        {
            "location": "/#compose_2",
            "text": "sudo curl -L \"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose   Si se quiere instalar otra version de compose podemos ver las versiones con este comando: Compose repository release page on GitHub   sudo chmod +x /usr/local/bin/docker-compose  - Aplicar permisos",
            "title": "Compose"
        },
        {
            "location": "/#commandos-basicos",
            "text": "",
            "title": "Commandos B\u00e1sicos"
        },
        {
            "location": "/#docker_3",
            "text": "Seguramente tengas que executar los siguientes comandos con sudo pero si no quieres hacerlo pincah  aqu\u00ed  y al final de la p\u00e1gina te dice como   docker run -i -t ubuntu /bin/echo  - Crear y ejecutar un contenedor. Lo busca en local y si no lo encuentra se lo descarga. El echo mostrar\u00e1 ese mensaje cuando arranque el contenedor.    docker start -a <pon-la-ID-del-container>  - Para arrancar un contenedor   docker stop <pon-la-ID-del-container>  - Para parar    docker pull ubuntu:XX.XX  - Descargar im\u00e1genes en Docker cloud    docker images  - Todas las im\u00e1genes disponibles    docker image rm <nombre-de-imagen>  - Para borrar imagenes    docker container exec -it proxy /bin/bash  - Entrar en un contenedor en ejecuci\u00f3n    docker ps -a  - Muestra todos los contenedores.    docker ps -s  - Muestra el disco usado    docker ps --filter  - Este comando es interesante. status={created, restarting, running, removing, paused, exited and dead}    docker ps --filter status=running  - Muestra los contenedores corriendo.    docker kill $(docker ps -q)  - Para todos los contenedores   docker rm $(docker ps -a -q)  - Elimina todos los contenedores  docker rmi -f $(docker images -q)  - Elimina todas las imagenes descargadas Compartir el directorio de trabajo:   \n$ docker run -ti -v \"$PWD\":/shared:ro ubuntu:14.04 /bin/bash\nro = lectura. Por defecto es de lectura/escritura    Desinstalar Docker\n*  sudo apt-get purge docker-engine  - Desintala",
            "title": "Docker"
        },
        {
            "location": "/#compose_3",
            "text": "docker-compose --version  - La version  docker-compose up -d  -  Crear el contenedor y lo ejecuta en background  docker-compose start  - Levanta el contenedor  docker-compose down  - Apaga los servicios que se levanto con docker-compose y borra los datos.  docker-compose stop  - Detiene los servicios y deja los datos como estaban.  docker-compose ps  - Muestra los contenedores funcionado  docker-compose exec  - Manda un comando y lo ejecuta a uno de los servicios levantados en el contenedor por Docker-compose. Servicios de docker-compose puede ser MYSQL o en el ejemplo: \u201cjekyll\u201d",
            "title": "Compose"
        },
        {
            "location": "/AppInventor/",
            "text": "AppInventor\n\n\n\u00bf Que vamos a hacer?\n\n\nEste manual vamos a realizar una DOCKERIZACI\u00d3N de sistemas Linux en las distribuciones de Ubuntu 19.10. Para ello se ha utilizado Docker como servidor de contenedores. \n   Hemos creado un archivo DockerFile y hemos instalado compose para su depliegue de contenedores.\n\n\nLa idea es dockerizar un sistema, para desplegar AppInventor. \n\n\nHemos creado dos lineas de creaci\u00f3n del contenedor:\n\n\n\n\n\n\n1) Contendor con volumen con AppInventor compartido por la m\u00e1quina HOST para poder a\u00f1adir componenetes.  \n\n        Hemos creado un contenedor con la distribuci\u00f3n ubuntu 18.10, instalandole las librerias necesarias para que se puede ejecutar AppInventor en el sistema y hemos creado un volumen compartido entre el HOST y el contenedor para poder agregar las librer\u00edas de AppInventor y nuevos componetes que vayamos desarrollando.\n        Para ello vamos a crearnos una imagen desde otra imagen y a\u00f1adiremos las dependencias necesarias as\u00ed como el volumen compartido. \n\n        En este documentos se explica paso a paso como realizar desde cero el DockerFile, pero si se prefiere se puede pasar a la instalaci\u00f3n directamente ya que se ha retocado la imagen.\n        Apartado \nCreando tu imagen\n\n\n\n\n\n\n\n\n2) Contenedor que se crea con todo lo necesario para ejecutar appInventor.\n        Si solo quer\u00e9is desplegar el contenedor para AppInventor, ir al apartado \nContenedor\n\n\n\n\n\n\nCreando tu imagen\n\n\nCreamos una carpeta llamada appinventor-docker\nAh\u00ed descargamos el c\u00f3digo que tenemos en este repositorio\ngit clone  \nhttps://github.com/MarcosJerez/appinventor-docker.git\n\n\nVamos a  \ncd appinventor-sources/docker\n\n\n* `git submodule update --init` - Y ejecutamos\n\n\n\n\n\ngit clone https://github.com/mit-cml/appinventor-sources.git\n - No bajamos AppInventor\n\n\n\n\nComo podemos observar en el DockerFile Partimos de una imagen de ubuntu que cambiamos a la 18.04\n\n\nFROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:openjdk-r/ppa && apt-get update && apt-get install -y \\\n    wget \\\nunzip \\\nopenjdk-8-jdk \\\nant \\\nlibc6 \\\nzlib1g \\\nlibstdc++6 \\\nlib32ncurses5 \\\nlib32stdc++6 \\\ngit\n\nRUN wget -O /tmp/appengine.zip https://storage.googleapis.com/appengine-sdks/featured/appengine-java-sdk-1.9.66.zip\n\nRUN unzip /tmp/appengine.zip -d /root && rm /tmp/appengine.zip\n\nCOPY startserver.sh /root/scripts/\n\nCOPY ant.sh /root/scripts/\n\nRUN chmod +x /root/scripts/startserver.sh\n\nRUN chmod +x /root/scripts/ant.sh\n\nENV PATH=\"$PATH:/root/appengine-java-sdk-1.9.66/bin/\"\n\nENV PATH=\"$PATH:/root/scripts/\"\n\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n\nENV PATH=\"$PATH:$JAVA_HOME/bin\"\n\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" |  tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\n\nRUN apt-get install apt-transport-https ca-certificates gnupg -y\n\nRUN apt-get install curl -y\n\nRUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\nRUN apt-get update &&  apt-get install google-cloud-sdk -y\n\nRUN apt-get update &&  apt-get --only-upgrade install google-cloud-sdk-skaffold kubectl google-cloud-sdk-anthos-auth google-cloud-sdk-minikube google-cloud-sdk google-cloud-sdk-app-engine-grpc google-cloud-sdk-kind google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-go google-cloud-sdk-firestore-emulator google-cloud-sdk-cloud-build-local google-cloud-sdk-datastore-emulator google-cloud-sdk-kpt google-cloud-sdk-app-engine-python google-cloud-sdk-spanner-emulator google-cloud-sdk-cbt google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java -y\n\nWORKDIR /root/\n\nEXPOSE 8888\n\n\n\nEn el DockerFile como podemos ver instalamos las dependecias necesarias dentro de nuestro contenedor\n\n\n        wget \\\n        unzip \\\n        openjdk-8-jdk \\\n        ant \\\n\n        libc6 \\\n        zlib1g \\\n\n        lib32ncurses5 \\\n        lib32bz2-1.0 \\\n        lib32stdc++6 \\\n        lib32z1 \\\n        git\n\n\n\n\n\ndocker build -t appinventorserver .\n -- creamos la imagen\n\n\n\n\nHemos preparado un docker-compose.yml\n\n\nversion: '3'\nservices:\n  appinventorserver:\n    image: appinventorserver3\n    ports:\n     - \"8888:8888\"\n    volumes:\n     - /home/marcos/Documentos/INDESS/Proyectos/DockerSpace/docker/compose/appinventor-docker/appinventor-sources:/root/appinventor-sources\n    stdin_open: true\n    tty: true\n\n\n\nPodemos ejecutar con docker \n* \nsudo docker run -it -v \"/home/marcos/Documentos/INDESS/Proyectos/DockerSpace/docker/appinventor-docker/appinventor-sources:/root/appinventor-sources/\" -p 8888:8888 appinventorserver\n\n\n\u00f3 con docker-compose\n\n\n\n\nsudo docker-compose up\n\n\n\n\nEn el contenedor:\n\n\n\n\n\n\ncd appinventor-sources/appinventor/\n\n\n\n\n\n\nant MakeAuthKey\n\n\n\n\n\n\nant\n\n\n\n\n\n\nSalimos del contenedor y ejecutamos appInventor desde docker:\n\n\n\n\ndocker-compose exec startserver.sh\n\n\n\n\n\u00f3\n\n\n\n\ndocker-compose exec dev_appserver.sh --port=8888 --address=0.0.0.0 appengine/build/war\n \n\n\n\n\nContenedor\n\n\nCreamos una carpeta llamada appinventor-docker\nAh\u00ed descargamos el c\u00f3digo que tenemos en este repositorio\ngit clone  \nhttps://github.com/MarcosJerez/appinventor-docker.git\n\n\n\n\ncd appinventor-docker/docker/\n\n\n\n\nCambiamos estos dos ficheros:\n\n\nDockerFile:\n\n\nFROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y software-properties-common && add-apt-r\nepository ppa:openjdk-r/ppa && apt-get update && apt-get install -y \\\n        wget \\\n        unzip \\\n        openjdk-8-jdk \\\n        ant \\\n        libc6 \\\n        zlib1g \\\n        libstdc++6 \\\n        lib32ncurses5 \\\n        lib32stdc++6 \\\n        git\n\n\nRUN wget -O /tmp/appengine.zip https://storage.googleapis.com/appengine-sdks/fea\ntured/appengine-java-sdk-1.9.66.zip\n\nRUN unzip /tmp/appengine.zip -d /root && rm /tmp/appengine.zip\n#bajar y copiar el ant.sh\nCOPY startserver.sh /root/scripts/\nRUN chmod +x /root/scripts/startserver.sh\n\nENV PATH=\"$PATH:/root/appengine-java-sdk-1.9.66/bin/\"\n\nENV PATH=\"$PATH:/root/scripts/\"\n\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n\nENV PATH=\"$PATH:$JAVA_HOME/bin\"\n\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" |  tee -a /etc/apt/sources.list.d/google-cloud\n-sdk.list\n\nRUN  apt-get install apt-transport-https ca-certificates gnupg -y\nRUN  apt-get install curl -y\n\nRUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\nRUN apt-get update &&  apt-get install google-cloud-sdk -y\n\nRUN  apt-get update &&  apt-get --only-upgrade install google-cloud-sdk-skaffold kubectl google-cloud-sdk-anthos-auth google-cloud-sdk-minikube google-cloud-sdk go\nogle-cloud-sdk-app-engine-grpc google-cloud-sdk-kind google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-go google-cloud-sdk-firestore-emulator google-clo\nud-sdk-cloud-build-local google-cloud-sdk-datastore-emulator google-cloud-sdk-kpt google-cloud-sdk-app-engine-python google-cloud-sdk-spanner-emulator google-cloud\n-sdk-cbt google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java -y\nWORKDIR /root/\nRUN git clone https://github.com/mit-cml/appinventor-sources.git\nRUN cd /root/appinventor-sources/ && git submodule update --init\n\nWORKDIR /root/appinventor-sources/appinventor\nRUN ls\nRUN  ant MakeAuthKey\nRUN  ant \nWORKDIR /root/\n\nEXPOSE 8888\nCMD [\"startserver.sh\", \"run\"]\n\n\n\ndocker-compose:\n\n\nversion: '3'\nservices:\n  appinventorserver:\n    build: .       \n    ports:\n     - \"8888:8888\"    \n    stdin_open: true\n    tty: true\n\n\n\n\n\nsudo docker-compose up -d\n\n\n\n\nEstructura UML",
            "title": "AppInventor"
        },
        {
            "location": "/AppInventor/#appinventor",
            "text": "",
            "title": "AppInventor"
        },
        {
            "location": "/AppInventor/#que-vamos-a-hacer",
            "text": "Este manual vamos a realizar una DOCKERIZACI\u00d3N de sistemas Linux en las distribuciones de Ubuntu 19.10. Para ello se ha utilizado Docker como servidor de contenedores. \n   Hemos creado un archivo DockerFile y hemos instalado compose para su depliegue de contenedores.  La idea es dockerizar un sistema, para desplegar AppInventor.   Hemos creado dos lineas de creaci\u00f3n del contenedor:    1) Contendor con volumen con AppInventor compartido por la m\u00e1quina HOST para poder a\u00f1adir componenetes.   \n        Hemos creado un contenedor con la distribuci\u00f3n ubuntu 18.10, instalandole las librerias necesarias para que se puede ejecutar AppInventor en el sistema y hemos creado un volumen compartido entre el HOST y el contenedor para poder agregar las librer\u00edas de AppInventor y nuevos componetes que vayamos desarrollando.\n        Para ello vamos a crearnos una imagen desde otra imagen y a\u00f1adiremos las dependencias necesarias as\u00ed como el volumen compartido.  \n        En este documentos se explica paso a paso como realizar desde cero el DockerFile, pero si se prefiere se puede pasar a la instalaci\u00f3n directamente ya que se ha retocado la imagen.\n        Apartado  Creando tu imagen     2) Contenedor que se crea con todo lo necesario para ejecutar appInventor.\n        Si solo quer\u00e9is desplegar el contenedor para AppInventor, ir al apartado  Contenedor",
            "title": "\u00bf Que vamos a hacer?"
        },
        {
            "location": "/AppInventor/#creando-tu-imagen",
            "text": "Creamos una carpeta llamada appinventor-docker\nAh\u00ed descargamos el c\u00f3digo que tenemos en este repositorio\ngit clone   https://github.com/MarcosJerez/appinventor-docker.git  Vamos a   cd appinventor-sources/docker  * `git submodule update --init` - Y ejecutamos   git clone https://github.com/mit-cml/appinventor-sources.git  - No bajamos AppInventor   Como podemos observar en el DockerFile Partimos de una imagen de ubuntu que cambiamos a la 18.04  FROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:openjdk-r/ppa && apt-get update && apt-get install -y \\\n    wget \\\nunzip \\\nopenjdk-8-jdk \\\nant \\\nlibc6 \\\nzlib1g \\\nlibstdc++6 \\\nlib32ncurses5 \\\nlib32stdc++6 \\\ngit\n\nRUN wget -O /tmp/appengine.zip https://storage.googleapis.com/appengine-sdks/featured/appengine-java-sdk-1.9.66.zip\n\nRUN unzip /tmp/appengine.zip -d /root && rm /tmp/appengine.zip\n\nCOPY startserver.sh /root/scripts/\n\nCOPY ant.sh /root/scripts/\n\nRUN chmod +x /root/scripts/startserver.sh\n\nRUN chmod +x /root/scripts/ant.sh\n\nENV PATH=\"$PATH:/root/appengine-java-sdk-1.9.66/bin/\"\n\nENV PATH=\"$PATH:/root/scripts/\"\n\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n\nENV PATH=\"$PATH:$JAVA_HOME/bin\"\n\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" |  tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\n\nRUN apt-get install apt-transport-https ca-certificates gnupg -y\n\nRUN apt-get install curl -y\n\nRUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\nRUN apt-get update &&  apt-get install google-cloud-sdk -y\n\nRUN apt-get update &&  apt-get --only-upgrade install google-cloud-sdk-skaffold kubectl google-cloud-sdk-anthos-auth google-cloud-sdk-minikube google-cloud-sdk google-cloud-sdk-app-engine-grpc google-cloud-sdk-kind google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-go google-cloud-sdk-firestore-emulator google-cloud-sdk-cloud-build-local google-cloud-sdk-datastore-emulator google-cloud-sdk-kpt google-cloud-sdk-app-engine-python google-cloud-sdk-spanner-emulator google-cloud-sdk-cbt google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java -y\n\nWORKDIR /root/\n\nEXPOSE 8888  En el DockerFile como podemos ver instalamos las dependecias necesarias dentro de nuestro contenedor          wget \\\n        unzip \\\n        openjdk-8-jdk \\\n        ant \\\n\n        libc6 \\\n        zlib1g \\\n\n        lib32ncurses5 \\\n        lib32bz2-1.0 \\\n        lib32stdc++6 \\\n        lib32z1 \\\n        git   docker build -t appinventorserver .  -- creamos la imagen   Hemos preparado un docker-compose.yml  version: '3'\nservices:\n  appinventorserver:\n    image: appinventorserver3\n    ports:\n     - \"8888:8888\"\n    volumes:\n     - /home/marcos/Documentos/INDESS/Proyectos/DockerSpace/docker/compose/appinventor-docker/appinventor-sources:/root/appinventor-sources\n    stdin_open: true\n    tty: true  Podemos ejecutar con docker \n*  sudo docker run -it -v \"/home/marcos/Documentos/INDESS/Proyectos/DockerSpace/docker/appinventor-docker/appinventor-sources:/root/appinventor-sources/\" -p 8888:8888 appinventorserver  \u00f3 con docker-compose   sudo docker-compose up   En el contenedor:    cd appinventor-sources/appinventor/    ant MakeAuthKey    ant    Salimos del contenedor y ejecutamos appInventor desde docker:   docker-compose exec startserver.sh   \u00f3   docker-compose exec dev_appserver.sh --port=8888 --address=0.0.0.0 appengine/build/war",
            "title": "Creando tu imagen"
        },
        {
            "location": "/AppInventor/#contenedor",
            "text": "Creamos una carpeta llamada appinventor-docker\nAh\u00ed descargamos el c\u00f3digo que tenemos en este repositorio\ngit clone   https://github.com/MarcosJerez/appinventor-docker.git   cd appinventor-docker/docker/   Cambiamos estos dos ficheros:  DockerFile:  FROM ubuntu:18.04\n\nRUN apt-get update && apt-get install -y software-properties-common && add-apt-r\nepository ppa:openjdk-r/ppa && apt-get update && apt-get install -y \\\n        wget \\\n        unzip \\\n        openjdk-8-jdk \\\n        ant \\\n        libc6 \\\n        zlib1g \\\n        libstdc++6 \\\n        lib32ncurses5 \\\n        lib32stdc++6 \\\n        git\n\n\nRUN wget -O /tmp/appengine.zip https://storage.googleapis.com/appengine-sdks/fea\ntured/appengine-java-sdk-1.9.66.zip\n\nRUN unzip /tmp/appengine.zip -d /root && rm /tmp/appengine.zip\n#bajar y copiar el ant.sh\nCOPY startserver.sh /root/scripts/\nRUN chmod +x /root/scripts/startserver.sh\n\nENV PATH=\"$PATH:/root/appengine-java-sdk-1.9.66/bin/\"\n\nENV PATH=\"$PATH:/root/scripts/\"\n\nENV JAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n\nENV PATH=\"$PATH:$JAVA_HOME/bin\"\n\nRUN echo \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" |  tee -a /etc/apt/sources.list.d/google-cloud\n-sdk.list\n\nRUN  apt-get install apt-transport-https ca-certificates gnupg -y\nRUN  apt-get install curl -y\n\nRUN curl https://packages.cloud.google.com/apt/doc/apt-key.gpg |  apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\n\nRUN apt-get update &&  apt-get install google-cloud-sdk -y\n\nRUN  apt-get update &&  apt-get --only-upgrade install google-cloud-sdk-skaffold kubectl google-cloud-sdk-anthos-auth google-cloud-sdk-minikube google-cloud-sdk go\nogle-cloud-sdk-app-engine-grpc google-cloud-sdk-kind google-cloud-sdk-pubsub-emulator google-cloud-sdk-app-engine-go google-cloud-sdk-firestore-emulator google-clo\nud-sdk-cloud-build-local google-cloud-sdk-datastore-emulator google-cloud-sdk-kpt google-cloud-sdk-app-engine-python google-cloud-sdk-spanner-emulator google-cloud\n-sdk-cbt google-cloud-sdk-bigtable-emulator google-cloud-sdk-app-engine-python-extras google-cloud-sdk-datalab google-cloud-sdk-app-engine-java -y\nWORKDIR /root/\nRUN git clone https://github.com/mit-cml/appinventor-sources.git\nRUN cd /root/appinventor-sources/ && git submodule update --init\n\nWORKDIR /root/appinventor-sources/appinventor\nRUN ls\nRUN  ant MakeAuthKey\nRUN  ant \nWORKDIR /root/\n\nEXPOSE 8888\nCMD [\"startserver.sh\", \"run\"]  docker-compose:  version: '3'\nservices:\n  appinventorserver:\n    build: .       \n    ports:\n     - \"8888:8888\"    \n    stdin_open: true\n    tty: true   sudo docker-compose up -d",
            "title": "Contenedor"
        },
        {
            "location": "/AppInventor/#estructura-uml",
            "text": "",
            "title": "Estructura UML"
        },
        {
            "location": "/MkDocs/",
            "text": "MkDocs\n\n\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.",
            "title": "MkDocs"
        },
        {
            "location": "/MkDocs/#mkdocs",
            "text": "mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.",
            "title": "MkDocs"
        },
        {
            "location": "/about/",
            "text": "Velox speluncae natus\n\n\nTemerasse abire\n\n\nLorem markdownum, neu aratro huc tenus potest multorumque morbi a discedite\nnovavit motasse cornua semina pennis terrarum praeterea faveas. Imago et fervet\nrefugam me Cinyras solvunt bis. Tuam Melanthus e sicut animo hos contende\ntantaque donec tu. Totas aera tua inhibere \nsub\n stimulos \nerat molimina\n,\ncorpora fuisses; est.\n\n\nSuas dixit, \nnon\n constiterat ripas\n\npraeclusaque\n gerebant admoto \narduus\nac\n edere iussa. Socero fugit tempore\ncrimina gremio, imis, spes coniuge! \nTraxit\n satum non\nCynthia sorores quodsi; candentia quare placebant in cornibus tangit consurgit\nmembra adunci.\n\n\n\n\nCaespite sua. Ergo Pylonque, amoris; non cum defendentia nefas vocabant per\n\ndurus videri\n, freti, frigida et. Sacra ut fata tantumque dolori, repletum\ndixit rubentem suis! Oculis quae quam haerentes matres vimque comitantibus\npostera amomo umor verba, natalibus dextras? Est hunc Tempe Hippomenes Tritona\ncornua di vocavit certe rigori in adnuerant?\n\n\n\n\nMala mersae Pandion Iovis\n\n\nVanam sacro quem, est terris agunt secuti religaret ferumque nescis. Virgis\ngarrula spernitque tantum Canens Palaestina semina indetonsusque viridem\nquaerensque nurus filia. Vidit vos accepit Nonacrinas poterant quoque roganti;\nangustis et quarto, et mori corpora; \nsed\n rectum pontum hominum. Dominum erat\nspatiantibus Aonios antro \niuvenes carchesia\n perhorruit erit, est.\n\n\nif (18) {\n    management *= 356634;\n    throughput_multimedia = horizontal_intellectual.application_software(4,\n            iscsi_client, pLayoutImpression) -\n            toolbarProtector.mnemonicNybble.fpu_ripping(spreadsheetIvr, -5,\n            clusterFlaming);\n} else {\n    srgbIcannWavelength *= network;\n}\nif (rss) {\n    google += -1;\n    throughput.cloud.primary(adc_drag + dataToggleBarebones, iteration, 1 +\n            cd_host_ajax);\n    install += 5;\n} else {\n    powerpoint_www = icann_chip_fsb(3, 49, component_server_pup) - 10;\n    backsideCold = tabletHsfWins + gif_swipe_trojan;\n}\nvar supplyDenialNetwork = burn.artificial_horse_kernel.tweet(\n        syntax_drive_emoticon - debugger + transistor, 72);\nif (debug_troubleshooting > start_ios_log) {\n    progressiveUdpModifier(ics_ntfs_tunneling, onAnalogEditor);\n} else {\n    ipvHyperlinkDslam(vlbCdfs + restore_xhtml, 152200 - ppm);\n}\n\n\n\nNec et iussis praebetque trabibus \net vertitur\nsubito\n Flentibus iacent Castrumque\nvidebar tanto vetus quem robore: rubefacta. Domito suis res meque testudine\ninplerat ante vidit Oceanus segetes, relinquit abolere motu. Quateret abit\ngerebat, sumere antiqua \nauxilium\n.\n\n\nPontus corbe volentem advertere placere abit solacia vixque semine perdite\nspissus suos rex auro coniugis; vultus. Est Graium qua iecit qui idque vere et:\nesse quale praesens prudens.",
            "title": "About"
        },
        {
            "location": "/about/#velox-speluncae-natus",
            "text": "",
            "title": "Velox speluncae natus"
        },
        {
            "location": "/about/#temerasse-abire",
            "text": "Lorem markdownum, neu aratro huc tenus potest multorumque morbi a discedite\nnovavit motasse cornua semina pennis terrarum praeterea faveas. Imago et fervet\nrefugam me Cinyras solvunt bis. Tuam Melanthus e sicut animo hos contende\ntantaque donec tu. Totas aera tua inhibere  sub  stimulos  erat molimina ,\ncorpora fuisses; est.  Suas dixit,  non  constiterat ripas praeclusaque  gerebant admoto  arduus\nac  edere iussa. Socero fugit tempore\ncrimina gremio, imis, spes coniuge!  Traxit  satum non\nCynthia sorores quodsi; candentia quare placebant in cornibus tangit consurgit\nmembra adunci.   Caespite sua. Ergo Pylonque, amoris; non cum defendentia nefas vocabant per durus videri , freti, frigida et. Sacra ut fata tantumque dolori, repletum\ndixit rubentem suis! Oculis quae quam haerentes matres vimque comitantibus\npostera amomo umor verba, natalibus dextras? Est hunc Tempe Hippomenes Tritona\ncornua di vocavit certe rigori in adnuerant?",
            "title": "Temerasse abire"
        },
        {
            "location": "/about/#mala-mersae-pandion-iovis",
            "text": "Vanam sacro quem, est terris agunt secuti religaret ferumque nescis. Virgis\ngarrula spernitque tantum Canens Palaestina semina indetonsusque viridem\nquaerensque nurus filia. Vidit vos accepit Nonacrinas poterant quoque roganti;\nangustis et quarto, et mori corpora;  sed  rectum pontum hominum. Dominum erat\nspatiantibus Aonios antro  iuvenes carchesia  perhorruit erit, est.  if (18) {\n    management *= 356634;\n    throughput_multimedia = horizontal_intellectual.application_software(4,\n            iscsi_client, pLayoutImpression) -\n            toolbarProtector.mnemonicNybble.fpu_ripping(spreadsheetIvr, -5,\n            clusterFlaming);\n} else {\n    srgbIcannWavelength *= network;\n}\nif (rss) {\n    google += -1;\n    throughput.cloud.primary(adc_drag + dataToggleBarebones, iteration, 1 +\n            cd_host_ajax);\n    install += 5;\n} else {\n    powerpoint_www = icann_chip_fsb(3, 49, component_server_pup) - 10;\n    backsideCold = tabletHsfWins + gif_swipe_trojan;\n}\nvar supplyDenialNetwork = burn.artificial_horse_kernel.tweet(\n        syntax_drive_emoticon - debugger + transistor, 72);\nif (debug_troubleshooting > start_ios_log) {\n    progressiveUdpModifier(ics_ntfs_tunneling, onAnalogEditor);\n} else {\n    ipvHyperlinkDslam(vlbCdfs + restore_xhtml, 152200 - ppm);\n}  Nec et iussis praebetque trabibus  et vertitur\nsubito  Flentibus iacent Castrumque\nvidebar tanto vetus quem robore: rubefacta. Domito suis res meque testudine\ninplerat ante vidit Oceanus segetes, relinquit abolere motu. Quateret abit\ngerebat, sumere antiqua  auxilium .  Pontus corbe volentem advertere placere abit solacia vixque semine perdite\nspissus suos rex auro coniugis; vultus. Est Graium qua iecit qui idque vere et:\nesse quale praesens prudens.",
            "title": "Mala mersae Pandion Iovis"
        },
        {
            "location": "/referencias/",
            "text": "Referencias\n\n\nDocker\n\n\nDocker-Compose\n\n\nWordpress\n\n\nAppInventor\n\n\nCrear tuspropias imagenes\n\n\nRecetas Docker\n\n\nMkDocs\n\n\nmkdocs.org\n\n\nmedium.com",
            "title": "Referencias"
        },
        {
            "location": "/referencias/#referencias",
            "text": "Docker  Docker-Compose  Wordpress",
            "title": "Referencias"
        },
        {
            "location": "/referencias/#appinventor",
            "text": "Crear tuspropias imagenes  Recetas Docker",
            "title": "AppInventor"
        },
        {
            "location": "/referencias/#mkdocs",
            "text": "mkdocs.org  medium.com",
            "title": "MkDocs"
        },
        {
            "location": "/wordpress/",
            "text": "Wordpress\n\n\n\u00bf Que vamos a hacer?\n\n\nEste manual vamos a realizar una DOCKERIZACI\u00d3N de sistemas Linux en las distribuciones de Ubuntu 19.10 y Centos 7. Para ello se ha utilizado Docker como servidor de contenedores. \n   Hemos creado un archivo DockerFile y hemos instalado compose para su depliegue de contenedores.\n\n\nLa idea es dockerizar un sistema, desplegar dos contenedores, uno con un servidor web y otro con un sistema gestor de Base de Datos, MySQL, comunicarlos entre si y comunicarlo con el HOST anfitri\u00f3n para poder hacer cambios en el c\u00f3digo.\n\n\ndocker-compose.yml\n\n\nAqu\u00ed tenemos un ejemplo de un fichero docker-compose.yml, con dos contenedores un SGBD MySQL y ua aplicaci\u00f3n WORDPRESS que explicaremos a continuaci\u00f3n:\n   (Para crear este fichero me he creado una carpeta Docker y dentro de ella otra que se llama test)\n\n\n    version: '2'\n        services:\n          mysql:\n            image: mysql:5.7\n            restart: always\n            ports:\n              - 8081:3306\n            environment:\n              MYSQL_USER: wordpress\n              MYSQL_ROOT_PASSWORD: wordpress\n              MYSQL_DATABASE: wordpress\n              MYSQL_PASSWORD: wordpress\n            networks:\n              - backend\n\n          wordpress:\n            depends_on:\n              - mysql\n            image: wordpress\n            ports:\n              - 8080:80\n            restart: always\n            volumes:\n              - ./:/var/www/html/wp-content/plugins/nelio-content\n            environment:\n              VIRTUAL_HOST: content.local\n              VIRTUAL_PORT: 8080\n              WORDPRESS_DB_HOST: mysql:3306\n              WORDPRESS_DB_USER: wordpress\n              WORDPRESS_DB_PASSWORD: wordpress\n            networks:\n              - frontend\n              - backend\n\n        networks:\n          backend:\n          frontend:\n            external:\n              name: proxy\n\n\n\nDefinimos dos servicios: mysql y wordpress\n\n\nLos m\u00e1s relevantes son la redirecci\u00f3n de puertos (del 8081 del anfitri\u00f3n al 3306 del hu\u00e9sped) y par\u00e1metros de la base de datos en s\u00ed (usuario, contrase\u00f1a, etc)\n\n\n     ports:\n              - 8081:3306\n     environment:\n            ...\n\n\n\nHay que indicar que el conntenedor wordpress depende de mysql para que pueda funcionar.\nLuego indicamos los par\u00e1metros de la base de datos.\n\n\n        depends_on:\n              - mysql\n        environment:\n            WORDPRESS_DB_HOST: mysql:3306\n            WORDPRESS_DB_USER: wordpress\n            WORDPRESS_DB_PASSWORD: wordpress\n\n\n\nA partir de este punto, si quieres nuevos WordPress en paralelo, sencillamente tendr\u00edas que repetir el proceso. Es decir, creas un nuevo directorio en ~/docker/\n, a\u00f1ades el fichero docker-compose.yml, cambias los puertos para acceder a \u00e9l (por ejemplo, 8082 para WordPress y 8083 para MySQL) para que no colisione con el contenedor que ya tenemos en marcha y lo pones a correr tambi\u00e9n.\nAhora vamos a crear las redes para nuestro proxy.\nAqu\u00ed nombramos dos redes, una para la conexion entre wordpress y mysql interna y la otra externa para poner unos dominios :\nRealmente esto solo hace falta para poder tener un dominio como content.local y no localhost:8080\n\n\n        networks:\n              - backend\n              - frontend:\n\n           ...\n            external:\n              name: proxy\n\n\n\nPara la externa necesitmao otro docker, para ello creamos una carpeta en docker, llamada proxy y este fichero *\ncompose-docker.yml\n\n\n    version: '2'\n\n    services:\n      nginx-proxy:\n        image: jwilder/nginx-proxy\n        restart: always\n        ports:\n          - 80:80\n          - 3306:3306\n        volumes:\n          - /var/run/docker.sock:/tmp/docker.sock:ro\n\n    networks:\n      default:\n        external:\n          name: proxy\n\n\n\nPara que funcione content.local hay que editar /etc/hosts de tu m\u00e1quina local.\n\n\n  127.0.0.1    content.local\n\n\n\nVamos a explicar la red que vamos a crear. Creamos una red llamada proxy que une el puerto 80 del anfitri\u00f3n con el puerto 80 de los huespedes y as\u00ed tambi\u00e9n co el puerto 3306.\n\n\nOs pongo comandos para ver la red y los puertos activos\n\n \nroute\n\n\n \nnmap -sT -O localhost\n\n\nCreamos nuestra red\n\n\nTendremos que crear una nueva red con el nombre de nuestra configuraci\u00f3n de red\n\n\n\n\n\n\ndocker network create proxy\n - Para crear nuestra red\n\n\n\n\n\n\ndocker network rm proxy\n - Para eliminar nuestra red\n\n\n\n\n\n\nLevantamos contenedores\n\n\nPara ponerlo en marcha tendr\u00edamos que irnos a las carpetas y ejecutar esto:\nPrimero para crear nuestra red proxy:\n\n\n\n\n\n\ndocker-compose up -d\n - en el directorio proxy\n\n\n\n\n\n\ndocker-compose up -d\n - en el directorio test\n\n\n\n\n\n\nEstructura UML",
            "title": "Wordpress"
        },
        {
            "location": "/wordpress/#wordpress",
            "text": "",
            "title": "Wordpress"
        },
        {
            "location": "/wordpress/#que-vamos-a-hacer",
            "text": "Este manual vamos a realizar una DOCKERIZACI\u00d3N de sistemas Linux en las distribuciones de Ubuntu 19.10 y Centos 7. Para ello se ha utilizado Docker como servidor de contenedores. \n   Hemos creado un archivo DockerFile y hemos instalado compose para su depliegue de contenedores.  La idea es dockerizar un sistema, desplegar dos contenedores, uno con un servidor web y otro con un sistema gestor de Base de Datos, MySQL, comunicarlos entre si y comunicarlo con el HOST anfitri\u00f3n para poder hacer cambios en el c\u00f3digo.",
            "title": "\u00bf Que vamos a hacer?"
        },
        {
            "location": "/wordpress/#docker-composeyml",
            "text": "Aqu\u00ed tenemos un ejemplo de un fichero docker-compose.yml, con dos contenedores un SGBD MySQL y ua aplicaci\u00f3n WORDPRESS que explicaremos a continuaci\u00f3n:\n   (Para crear este fichero me he creado una carpeta Docker y dentro de ella otra que se llama test)      version: '2'\n        services:\n          mysql:\n            image: mysql:5.7\n            restart: always\n            ports:\n              - 8081:3306\n            environment:\n              MYSQL_USER: wordpress\n              MYSQL_ROOT_PASSWORD: wordpress\n              MYSQL_DATABASE: wordpress\n              MYSQL_PASSWORD: wordpress\n            networks:\n              - backend\n\n          wordpress:\n            depends_on:\n              - mysql\n            image: wordpress\n            ports:\n              - 8080:80\n            restart: always\n            volumes:\n              - ./:/var/www/html/wp-content/plugins/nelio-content\n            environment:\n              VIRTUAL_HOST: content.local\n              VIRTUAL_PORT: 8080\n              WORDPRESS_DB_HOST: mysql:3306\n              WORDPRESS_DB_USER: wordpress\n              WORDPRESS_DB_PASSWORD: wordpress\n            networks:\n              - frontend\n              - backend\n\n        networks:\n          backend:\n          frontend:\n            external:\n              name: proxy  Definimos dos servicios: mysql y wordpress  Los m\u00e1s relevantes son la redirecci\u00f3n de puertos (del 8081 del anfitri\u00f3n al 3306 del hu\u00e9sped) y par\u00e1metros de la base de datos en s\u00ed (usuario, contrase\u00f1a, etc)       ports:\n              - 8081:3306\n     environment:\n            ...  Hay que indicar que el conntenedor wordpress depende de mysql para que pueda funcionar.\nLuego indicamos los par\u00e1metros de la base de datos.          depends_on:\n              - mysql\n        environment:\n            WORDPRESS_DB_HOST: mysql:3306\n            WORDPRESS_DB_USER: wordpress\n            WORDPRESS_DB_PASSWORD: wordpress  A partir de este punto, si quieres nuevos WordPress en paralelo, sencillamente tendr\u00edas que repetir el proceso. Es decir, creas un nuevo directorio en ~/docker/ , a\u00f1ades el fichero docker-compose.yml, cambias los puertos para acceder a \u00e9l (por ejemplo, 8082 para WordPress y 8083 para MySQL) para que no colisione con el contenedor que ya tenemos en marcha y lo pones a correr tambi\u00e9n.\nAhora vamos a crear las redes para nuestro proxy.\nAqu\u00ed nombramos dos redes, una para la conexion entre wordpress y mysql interna y la otra externa para poner unos dominios :\nRealmente esto solo hace falta para poder tener un dominio como content.local y no localhost:8080          networks:\n              - backend\n              - frontend:\n\n           ...\n            external:\n              name: proxy  Para la externa necesitmao otro docker, para ello creamos una carpeta en docker, llamada proxy y este fichero * compose-docker.yml      version: '2'\n\n    services:\n      nginx-proxy:\n        image: jwilder/nginx-proxy\n        restart: always\n        ports:\n          - 80:80\n          - 3306:3306\n        volumes:\n          - /var/run/docker.sock:/tmp/docker.sock:ro\n\n    networks:\n      default:\n        external:\n          name: proxy  Para que funcione content.local hay que editar /etc/hosts de tu m\u00e1quina local.    127.0.0.1    content.local  Vamos a explicar la red que vamos a crear. Creamos una red llamada proxy que une el puerto 80 del anfitri\u00f3n con el puerto 80 de los huespedes y as\u00ed tambi\u00e9n co el puerto 3306.  Os pongo comandos para ver la red y los puertos activos   route    nmap -sT -O localhost",
            "title": "docker-compose.yml"
        },
        {
            "location": "/wordpress/#creamos-nuestra-red",
            "text": "Tendremos que crear una nueva red con el nombre de nuestra configuraci\u00f3n de red    docker network create proxy  - Para crear nuestra red    docker network rm proxy  - Para eliminar nuestra red",
            "title": "Creamos nuestra red"
        },
        {
            "location": "/wordpress/#levantamos-contenedores",
            "text": "Para ponerlo en marcha tendr\u00edamos que irnos a las carpetas y ejecutar esto:\nPrimero para crear nuestra red proxy:    docker-compose up -d  - en el directorio proxy    docker-compose up -d  - en el directorio test",
            "title": "Levantamos contenedores"
        },
        {
            "location": "/wordpress/#estructura-uml",
            "text": "",
            "title": "Estructura UML"
        }
    ]
}